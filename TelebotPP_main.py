import sys
import mysql
import telebot
from Tools.scripts.mkreal import join
from mysql.connector import errorcode
from telebot import types, TeleBot
import const
from geopy.distance import geodesic

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
try:
    db = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        port="3306",
        database="telebotPP"
    )


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
except mysql.connector.Error as err:
    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
        print("–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å!")
        sys.exit()
    elif err.errno == errorcode.ER_BAD_DB_ERROR:
        print("–¢–∞–∫–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        sys.exit()
    else:
        print(err)
        sys.exit()

cursor = db.cursor()


# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot: TeleBot = telebot.TeleBot(const.API_TOKEN, parse_mode=None)

# –ú–µ–Ω—é
markup_menu = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                        row_width=2)  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é. –ø–æ–¥–≥–æ–Ω –ø–æ–¥ —Ä–∞–∑–º–µ—Ä, –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

markup_shop = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

markup_our_shops = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

# –ö–Ω–æ–ø–∫–∏
btn_catalog = types.KeyboardButton('–ö–∞—Ç–∞–ª–æ–≥ üìñ')
btn_shop = types.KeyboardButton('–ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã üè™')
# btn_website = types.KeyboardButton('–ù–∞—à —Å–∞–π—Ç üåê')
btn_nearest_shop = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –∫ –í–∞–º –º–∞–≥–∞–∑–∏–Ω üîΩ', request_location=True)
btn_back_to_menu = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚¨Ö')
btn_shop1 = types.KeyboardButton('–ú–∞–≥–∞–∑–∏–Ω –≤ –ù–∏–∫–æ–ª–∏–Ω–æ üè°')
btn_shop2 = types.KeyboardButton('–ü–∏—Ç–æ–º–Ω–∏–∫ –≤ –†—è–±–∏–Ω–∫–∞—Ö üåø')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é
markup_menu.add(btn_catalog, btn_shop, btn_nearest_shop)

markup_our_shops.add(btn_shop1, btn_shop2, btn_back_to_menu)

markup_inline_shop = types.InlineKeyboardMarkup(row_width=1)

# btn_in_shop_1 = types.InlineKeyboardButton('–ú–∞–≥–∞–∑–∏–Ω –≤ –ù–∏–∫–æ–ª–∏–Ω–æ üè°', callback_data='shop_1')
# btn_in_shop_2 = types.InlineKeyboardButton('–ü–∏—Ç–æ–º–Ω–∏–∫ –≤ –†—è–±–∏–Ω–∫–∞—Ö üåø', callback_data='shop_2')

# markup_inline_shop.add(btn_in_shop_1, btn_in_shop_2)

markup_inline_catalog = types.InlineKeyboardMarkup(row_width=1)

btn_deciduous = types.InlineKeyboardButton('–õ–∏—Å—Ç–≤–µ–Ω–Ω—ã–µ üåø', callback_data='deciduous')
btn_perennials = types.InlineKeyboardButton('–ú–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–∫–∏ üå≥', callback_data='perennials')
btn_fruit = types.InlineKeyboardButton('–ü–ª–æ–¥–æ–≤—ã–µ üçè', callback_data='fruit')
btn_conifers = types.InlineKeyboardButton('–•–≤–æ–π–Ω—ã–µ üå≤', callback_data='conifers')
btn_search = types.InlineKeyboardButton('–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé', callback_data='search')

markup_inline_catalog.add(btn_deciduous, btn_perennials, btn_fruit, btn_conifers, btn_search)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π, —Å–≤–æ–π—Å—Ç–≤–æ commands –∫–æ–º–∞–Ω–¥—ã start, help
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + message.from_user.first_name + ". –Ø –±–æ—Ç Planet Plant's!",
                     reply_markup=markup_menu)


@bot.message_handler(func=lambda message: True)
def echo(message):
    if message.text == '–ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã üè™':
        bot.send_message(message.chat.id, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã', reply_markup=markup_our_shops)

    elif message.text == '–ù–∞—à —Å–∞–π—Ç üåê':
        bot.send_message(message.chat.id, const.WEB_URL)

    elif message.text == '–ö–∞—Ç–∞–ª–æ–≥ üìñ':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=markup_inline_catalog)

    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚¨Ö':
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=markup_menu)

    elif message.text == '–ú–∞–≥–∞–∑–∏–Ω –≤ –ù–∏–∫–æ–ª–∏–Ω–æ üè°':
        bot.send_venue(message.chat.id, const.SHOP_1['latm'], const.SHOP_1['lonm'],
                       const.SHOP_1['title'], const.SHOP_1['address'], reply_markup=markup_our_shops)

    elif message.text == '–ü–∏—Ç–æ–º–Ω–∏–∫ –≤ –†—è–±–∏–Ω–∫–∞—Ö üåø':
        bot.send_venue(message.chat.id, const.SHOP_2['latm'], const.SHOP_2['lonm'],
                       const.SHOP_2['title'], const.SHOP_2['address'], reply_markup=markup_our_shops)

    else:
        bot.reply_to(message, message.text, reply_markup=markup_menu)


# –í—ã–≤–æ–¥ –≥–µ–æ–º–µ—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def call_back_shops(call):
    print(call)
    product = ''

    # if call.data == 'shop_1':
    #
    #     bot.send_venue(call.message.chat.id, const.SHOP_1['latm'], const.SHOP_1['lonm'],
    #                    const.SHOP_1['title'], const.SHOP_1['address'])
    # elif call.data == 'shop_2':
    #     bot.send_venue(call.message.chat.id, const.SHOP_2['latm'], const.SHOP_2['lonm'],
    #                    const.SHOP_2['title'], const.SHOP_2['address'])

    if call.data == 'deciduous':
        sql = "SELECT NAME, DESCRIPTION, COST, PHOTO FROM product WHERE ID_CATEGORY_FK = %s"
        val = ("3", )
        cursor.execute(sql, val)
        product = cursor.fetchall()

    for x in product:
        print(x)
        bot.send_message(call.message.chat.id, '\n'.join(str(a) for a in x))

    else:
        bot.reply_to(call.message, call.message.text, reply_markup=markup_shop)


# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–∞–≥–∞–∑–∏–Ω–∞
@bot.message_handler(func=lambda message: True, content_types=['location'])
def shops_location(message):
    print(message)
    lon = message.location.longitude  # –®–∏—Ä–æ—Ç–∞
    lat = message.location.latitude  # –î–æ–ª–≥–æ—Ç–∞

    distance = []
    for m in const.SHOPS:
        result = geodesic((m['latm'], m['lonm']), (lat, lon))
        distance.append(result)
    index = distance.index(min(distance))

    bot.send_message(message.chat.id, '–ë–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –º–∞–≥–∞–∑–∏–Ω')
    bot.send_venue(message.chat.id, const.SHOPS[index]['latm'], const.SHOPS[index]['lonm'],
                   const.SHOPS[index]['title'], const.SHOPS[index]['address'])
    print('–¥–æ–ª–≥–æ—Ç–∞ {} —à–∏—Ä–æ—Ç–∞ {}'.format(lat, lon))  # –≤—ã–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è









bot.polling()
